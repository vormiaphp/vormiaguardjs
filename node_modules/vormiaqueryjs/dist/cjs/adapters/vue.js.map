{"version":3,"file":"vue.js","sources":["../../../src/adapters/vue/useVormia.js"],"sourcesContent":["import { ref } from 'vue';\nimport { getGlobalVormiaClient } from '../../client/createVormiaClient';\nimport { VormiaError } from '../../client/utils/VormiaError';\n\nexport function useVormiaQuery(options) {\n  const client = getGlobalVormiaClient();\n  const data = ref(null);\n  const error = ref(null);\n  const isLoading = ref(false);\n  const isError = ref(false);\n  const isSuccess = ref(false);\n\n  const fetchData = async (opts = {}) => {\n    const mergedOptions = { ...options, ...opts };\n    const { \n      endpoint, \n      method = 'GET', \n      params, \n      data: bodyData, \n      headers, \n      transform, \n      onSuccess, \n      onError \n    } = mergedOptions;\n\n    isLoading.value = true;\n    isError.value = false;\n    isSuccess.value = false;\n\n    try {\n      const config = {\n        method,\n        params: method === 'GET' ? params : undefined,\n        headers\n      };\n\n      const response = await client.request({\n        url: endpoint,\n        method,\n        data: method !== 'GET' ? (bodyData || params) : undefined,\n        ...config,\n      });\n      \n      let result = response.data;\n\n      if (transform && result) {\n        result = transform(result);\n        response.data = result;\n      }\n\n      data.value = result;\n      isSuccess.value = true;\n      \n      if (onSuccess) {\n        onSuccess(response);\n      }\n\n      return response;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'An unknown error occurred';\n      const status = err?.response?.status;\n      const errorData = err?.response?.data;\n      \n      const errorObj = err instanceof VormiaError \n        ? err \n        : new VormiaError(errorMessage, status, errorData);\n        \n      error.value = errorObj;\n      isError.value = true;\n      \n      if (onError) {\n        onError(errorObj);\n      }\n      \n      throw errorObj;\n    } finally {\n      isLoading.value = false;\n    }\n  };\n\n  if (options.immediate !== false) {\n    fetchData();\n  }\n\n  return {\n    data,\n    error,\n    isLoading,\n    isError,\n    isSuccess,\n    fetch: fetchData,\n    refetch: fetchData\n  };\n}\n\nexport function useVormiaMutation(options = {}) {\n  const client = getGlobalVormiaClient();\n  const data = ref(null);\n  const error = ref(null);\n  const isLoading = ref(false);\n  const isError = ref(false);\n  const isSuccess = ref(false);\n\n  const mutate = async (endpoint, values, method = 'POST', config = {}) => {\n    isLoading.value = true;\n    isError.value = false;\n    isSuccess.value = false;\n\n    try {\n      const response = await client.request({\n        url: endpoint,\n        method,\n        data: values,\n        ...config\n      });\n\n      data.value = response;\n      isSuccess.value = true;\n      \n      if (options.onSuccess) {\n        options.onSuccess(response);\n      }\n\n      return response;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'An unknown error occurred';\n      const status = err?.response?.status;\n      const errorData = err?.response?.data;\n      \n      const errorObj = err instanceof VormiaError \n        ? err \n        : new VormiaError(errorMessage, status, errorData);\n        \n      error.value = errorObj;\n      isError.value = true;\n      \n      if (options.onError) {\n        options.onError(errorObj);\n      }\n      \n      throw errorObj;\n    } finally {\n      isLoading.value = false;\n    }\n  };\n\n  return {\n    data,\n    error,\n    isLoading,\n    isError,\n    isSuccess,\n    mutate\n  };\n}\n"],"names":["options","client","getGlobalVormiaClient","data","ref","error","isLoading","isError","isSuccess","mutate","async","endpoint","values","method","config","value","response","request","url","onSuccess","err","errorMessage","Error","message","status","_a","errorData","_b","errorObj","VormiaError","onError","fetchData","opts","mergedOptions","params","bodyData","headers","transform","result","immediate","fetch","refetch"],"mappings":"0NA+FO,SAA2BA,EAAU,IAC1C,MAAMC,EAASC,EAAAA,wBACTC,EAAOC,EAAAA,IAAI,MACXC,EAAQD,EAAAA,IAAI,MACZE,EAAYF,EAAAA,KAAI,GAChBG,EAAUH,EAAAA,KAAI,GACdI,EAAYJ,EAAAA,KAAI,GA6CtB,MAAO,CACLD,OACAE,QACAC,YACAC,UACAC,YACAC,OAjDaC,MAAOC,EAAUC,EAAQC,EAAS,OAAQC,EAAS,cAChER,EAAUS,OAAQ,EAClBR,EAAQQ,OAAQ,EAChBP,EAAUO,OAAQ,EAElB,IACE,MAAMC,QAAiBf,EAAOgB,QAAQ,CACpCC,IAAKP,EACLE,SACAV,KAAMS,KACHE,IAUL,OAPAX,EAAKY,MAAQC,EACbR,EAAUO,OAAQ,EAEdf,EAAQmB,WACVnB,EAAQmB,UAAUH,GAGbA,CACb,OAAaI,GACP,MAAMC,EAAeD,aAAeE,MAAQF,EAAIG,QAAU,4BACpDC,EAAS,OAAAC,EAAA,MAAAL,OAAA,EAAAA,EAAKJ,eAAL,EAAAS,EAAeD,OACxBE,EAAY,OAAAC,EAAA,MAAAP,OAAA,EAAAA,EAAKJ,eAAL,EAAAW,EAAexB,KAE3ByB,EAAWR,aAAeS,EAAAA,YAC5BT,EACA,IAAIS,cAAYR,EAAcG,EAAQE,GAS1C,MAPArB,EAAMU,MAAQa,EACdrB,EAAQQ,OAAQ,EAEZf,EAAQ8B,SACV9B,EAAQ8B,QAAQF,GAGZA,CACZ,CAAA,QACMtB,EAAUS,OAAQ,CACxB,GAWA,yBAtJO,SAAwBf,GAC7B,MAAMC,EAASC,EAAAA,wBACTC,EAAOC,EAAAA,IAAI,MACXC,EAAQD,EAAAA,IAAI,MACZE,EAAYF,EAAAA,KAAI,GAChBG,EAAUH,EAAAA,KAAI,GACdI,EAAYJ,EAAAA,KAAI,GAEhB2B,EAAYrB,MAAOsB,EAAO,cAC9B,MAAMC,EAAgB,IAAKjC,KAAYgC,IACjCrB,SACJA,EAAAE,OACAA,EAAS,MAAAqB,OACTA,EACA/B,KAAMgC,EAAAC,QACNA,EAAAC,UACAA,EAAAlB,UACAA,EAAAW,QACAA,GACEG,EAEJ3B,EAAUS,OAAQ,EAClBR,EAAQQ,OAAQ,EAChBP,EAAUO,OAAQ,EAElB,IACE,MAAMD,EAAS,CACbD,SACAqB,OAAmB,QAAXrB,EAAmBqB,OAAS,EACpCE,WAGIpB,QAAiBf,EAAOgB,QAAQ,CACpCC,IAAKP,EACLE,SACAV,KAAiB,QAAXU,EAAoBsB,GAAYD,OAAU,KAC7CpB,IAGL,IAAIwB,EAAStB,EAASb,KActB,OAZIkC,GAAaC,IACfA,EAASD,EAAUC,GACnBtB,EAASb,KAAOmC,GAGlBnC,EAAKY,MAAQuB,EACb9B,EAAUO,OAAQ,EAEdI,GACFA,EAAUH,GAGLA,CACb,OAAaI,GACP,MAAMC,EAAeD,aAAeE,MAAQF,EAAIG,QAAU,4BACpDC,EAAS,OAAAC,EAAA,MAAAL,OAAA,EAAAA,EAAKJ,eAAL,EAAAS,EAAeD,OACxBE,EAAY,OAAAC,EAAA,MAAAP,OAAA,EAAAA,EAAKJ,eAAL,EAAAW,EAAexB,KAE3ByB,EAAWR,aAAeS,EAAAA,YAC5BT,EACA,IAAIS,cAAYR,EAAcG,EAAQE,GAS1C,MAPArB,EAAMU,MAAQa,EACdrB,EAAQQ,OAAQ,EAEZe,GACFA,EAAQF,GAGJA,CACZ,CAAA,QACMtB,EAAUS,OAAQ,CACxB,GAOE,OAJ0B,IAAtBf,EAAQuC,WACVR,IAGK,CACL5B,OACAE,QACAC,YACAC,UACAC,YACAgC,MAAOT,EACPU,QAASV,EAEb"}