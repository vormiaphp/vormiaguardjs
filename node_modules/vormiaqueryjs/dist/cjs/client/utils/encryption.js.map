{"version":3,"file":"encryption.js","sources":["../../../../src/client/utils/encryption.js"],"sourcesContent":["import CryptoJS from \"crypto-js\";\n\n// Node.js crypto for RSA\nlet crypto;\ntry {\n  crypto = require(\"crypto\");\n} catch {\n  crypto = null;\n}\n\n// Load keys from environment variables (for SSR/Node.js)\nconst PUBLIC_KEY = process.env.VORMIA_PUBLIC_KEY;\nconst PRIVATE_KEY = process.env.VORMIA_PRIVATE_KEY;\n\n/**\n * Encrypts data using AES encryption\n * @param {any} data - The data to encrypt\n * @param {string} key - The encryption key\n * @returns {string} Encrypted data as string\n */\nexport const encryptData = (data, key) => {\n  try {\n    const jsonString = JSON.stringify(data);\n    return CryptoJS.AES.encrypt(jsonString, key).toString();\n  } catch {\n    return null;\n  }\n};\n\n/**\n * Decrypts data that was encrypted with encryptData\n * @param {string} encryptedData - The encrypted data\n * @param {string} key - The decryption key\n * @returns {any} The decrypted data\n */\nexport const decryptData = (encryptedData, key) => {\n  try {\n    const bytes = CryptoJS.AES.decrypt(encryptedData, key);\n    const decrypted = bytes.toString(CryptoJS.enc.Utf8);\n    return JSON.parse(decrypted);\n  } catch {\n    return null;\n  }\n};\n\n/**\n * Creates a SHA-256 hash of the input data\n * @param {string} data - The data to hash\n * @returns {string} The hashed string\n */\nexport const hashData = (data) => {\n  return CryptoJS.SHA256(data).toString();\n};\n\n/**\n * Generates a random key for encryption\n * @param {number} [length=32] - The length of the key in bytes\n * @returns {string} A random key string\n */\nexport const generateRandomKey = (length = 32) => {\n  return CryptoJS.lib.WordArray.random(length).toString();\n};\n\n/**\n * Creates a secure token by combining a random string with a timestamp\n * @returns {string} A secure token\n */\nexport const createSecureToken = () => {\n  const random = generateRandomKey(16);\n  const timestamp = Date.now().toString();\n  return hashData(random + timestamp);\n};\n\n/**\n * Safely compares two strings in constant time to prevent timing attacks\n * @param {string} a - First string\n * @param {string} b - Second string\n * @returns {boolean} True if strings are equal\n */\nexport const secureCompare = (a, b) => {\n  const aBuffer = Buffer.from(a);\n  const bBuffer = Buffer.from(b);\n\n  if (aBuffer.length !== bBuffer.length) {\n    return false;\n  }\n\n  return crypto.subtle.timingSafeEqual(aBuffer, bBuffer);\n};\n\n// --- RSA ENCRYPTION/DECRYPTION (Node.js only) ---\n\nexport function encryptWithPublicKey(data, publicKey = PUBLIC_KEY) {\n  if (!crypto || !publicKey)\n    throw new Error(\"RSA encryption requires Node.js and a public key\");\n  const buffer = Buffer.from(\n    typeof data === \"string\" ? data : JSON.stringify(data)\n  );\n  return crypto.publicEncrypt(publicKey, buffer).toString(\"base64\");\n}\n\nexport function decryptWithPrivateKey(encrypted, privateKey = PRIVATE_KEY) {\n  if (!crypto || !privateKey)\n    throw new Error(\"RSA decryption requires Node.js and a private key\");\n  const buffer = Buffer.from(encrypted, \"base64\");\n  const decrypted = crypto.privateDecrypt(privateKey, buffer).toString(\"utf8\");\n  try {\n    return JSON.parse(decrypted);\n  } catch {\n    return decrypted;\n  }\n}\n\n/* global process, require, Buffer */\n"],"names":["crypto","require","PUBLIC_KEY","process","env","VORMIA_PUBLIC_KEY","PRIVATE_KEY","VORMIA_PRIVATE_KEY","encrypted","privateKey","Error","buffer","Buffer","from","decrypted","privateDecrypt","toString","JSON","parse","data","key","jsonString","stringify","CryptoJS","AES","encrypt","publicKey","publicEncrypt"],"mappings":"6GAGA,IAAIA,EACJ,IACEA,EAASC,QAAQ,SACnB,CAAA,MACED,EAAS,IACX,CAGA,MAAME,EAAaC,QAAQC,IAAIC,kBACzBC,EAAcH,QAAQC,IAAIG,iDAyFzB,SAA+BC,EAAWC,EAAaH,GAC5D,IAAKN,IAAWS,EACd,MAAM,IAAIC,MAAM,qDAClB,MAAMC,EAASC,OAAOC,KAAKL,EAAW,UAChCM,EAAYd,EAAOe,eAAeN,EAAYE,GAAQK,SAAS,QACrE,IACE,OAAOC,KAAKC,MAAMJ,EACtB,CAAA,MACI,OAAOA,CACX,CACA,sBA3F2B,CAACK,EAAMC,KAChC,IACE,MAAMC,EAAaJ,KAAKK,UAAUH,GAClC,OAAOI,EAASC,IAAIC,QAAQJ,EAAYD,GAAKJ,UACjD,CAAA,MACI,OAAO,IACX,gCAkEO,SAA8BG,EAAMO,EAAYxB,GACrD,IAAKF,IAAW0B,EACd,MAAM,IAAIhB,MAAM,oDAClB,MAAMC,EAASC,OAAOC,KACJ,iBAATM,EAAoBA,EAAOF,KAAKK,UAAUH,IAEnD,OAAOnB,EAAO2B,cAAcD,EAAWf,GAAQK,SAAS,SAC1D"}