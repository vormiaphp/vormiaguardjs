{"version":3,"file":"useVrmMutation.js","sources":["../../../src/hooks/useVrmMutation.js"],"sourcesContent":["import { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { getGlobalVormiaClient } from '../client/createVormiaClient';\n\n/**\n * Hook for making API mutations with Vormia\n * @param {Object} options - Mutation options\n * @param {string} options.endpoint - API endpoint\n * @param {string} [options.method='POST'] - HTTP method\n * @param {Object} [options.headers] - Custom headers\n * @param {Function} [options.transform] - Transform function for response data\n * @param {boolean} [options.encryptData=false] - Whether to encrypt the request data\n * @param {Function} [options.onSuccess] - Success callback\n * @param {Function} [options.onError] - Error callback\n * @returns {Object} Mutation result and utilities\n */\nexport const useVrmMutation = (options) => {\n  const queryClient = useQueryClient();\n  const client = getGlobalVormiaClient();\n\n  const {\n    endpoint,\n    method = 'POST',\n    headers,\n    transform,\n    encryptData = false,\n    onSuccess,\n    onError,\n    ...mutationOptions\n  } = options;\n\n  const mutation = useMutation({\n    mutationFn: async (variables) => {\n      try {\n        const config = {\n          method,\n          url: endpoint,\n          data: variables,\n          headers: {\n            'Content-Type': 'application/json',\n            ...headers,\n          },\n          encryptData,\n        };\n\n        const response = await client.request(config);\n\n        if (transform && typeof transform === 'function') {\n          return {\n            ...response,\n            data: transform(response.data)\n          };\n        }\n\n        return response;\n      } catch (error) {\n        throw error instanceof Error ? error : new Error('Mutation failed');\n      }\n    },\n    onSuccess: (data, variables, context) => {\n      if (onSuccess) {\n        onSuccess(data, variables, context);\n      }\n      // Invalidate related queries\n      queryClient.invalidateQueries({ queryKey: [endpoint] });\n    },\n    onError: (error, variables, context) => {\n      if (onError) {\n        onError(error, variables, context);\n      }\n    },\n    ...mutationOptions,\n  });\n\n  // Add invalidateQueries utility\n  const invalidateQueries = (queryKeys = [endpoint]) => {\n    return queryClient.invalidateQueries({\n      queryKey: queryKeys,\n    });\n  };\n\n  return {\n    ...mutation,\n    invalidateQueries,\n  };\n};\n\n// Specialized hooks for common operations\n\n/**\n * Hook for create operations\n * @param {string} endpoint - API endpoint\n * @param {Object} options - Mutation options\n * @returns {Object} Mutation result\n */\nexport const useVrmCreate = (endpoint, options = {}) => {\n  return useVrmMutation({\n    endpoint,\n    method: 'POST',\n    ...options,\n  });\n};\n\n/**\n * Hook for update operations (PUT)\n * @param {string} endpoint - API endpoint\n * @param {Object} options - Mutation options\n * @returns {Object} Mutation result\n */\nexport const useVrmUpdate = (endpoint, options = {}) => {\n  return useVrmMutation({\n    endpoint,\n    method: 'PUT',\n    ...options,\n  });\n};\n\n/**\n * Hook for partial update operations (PATCH)\n * @param {string} endpoint - API endpoint\n * @param {Object} options - Mutation options\n * @returns {Object} Mutation result\n */\nexport const useVrmPatch = (endpoint, options = {}) => {\n  return useVrmMutation({\n    endpoint,\n    method: 'PATCH',\n    ...options,\n  });\n};\n\n/**\n * Hook for delete operations\n * @param {string} endpoint - API endpoint\n * @param {Object} options - Mutation options\n * @returns {Object} Mutation result\n */\nexport const useVrmDelete = (endpoint, options = {}) => {\n  return useVrmMutation({\n    endpoint,\n    method: 'DELETE',\n    ...options,\n  });\n};\n"],"names":["options","queryClient","useQueryClient","client","getGlobalVormiaClient","endpoint","method","headers","transform","encryptData","onSuccess","onError","mutationOptions","useMutation","mutationFn","async","variables","config","url","data","response","request","error","Error","context","invalidateQueries","queryKey","queryKeys"],"mappings":"6LAe+BA,IAC7B,MAAMC,EAAcC,EAAAA,iBACdC,EAASC,EAAAA,yBAETC,SACJA,EAAAC,OACAA,EAAS,OAAAC,QACTA,EAAAC,UACAA,EAAAC,YACAA,GAAc,EAAAC,UACdA,EAAAC,QACAA,KACGC,GACDZ,EAoDJ,MAAO,IAlDUa,EAAAA,YAAY,CAC3BC,WAAYC,MAAOC,IACjB,IACE,MAAMC,EAAS,CACbX,SACAY,IAAKb,EACLc,KAAMH,EACNT,QAAS,CACP,eAAgB,sBACbA,GAELE,eAGIW,QAAiBjB,EAAOkB,QAAQJ,GAEtC,OAAIT,GAAkC,mBAAdA,EACf,IACFY,EACHD,KAAMX,EAAUY,EAASD,OAItBC,CACf,OAAeE,GACP,MAAMA,aAAiBC,MAAQD,EAAQ,IAAIC,MAAM,kBACzD,GAEIb,UAAW,CAACS,EAAMH,EAAWQ,KACvBd,GACFA,EAAUS,EAAMH,EAAWQ,GAG7BvB,EAAYwB,kBAAkB,CAAEC,SAAU,CAACrB,MAE7CM,QAAS,CAACW,EAAON,EAAWQ,KACtBb,GACFA,EAAQW,EAAON,EAAWQ,OAG3BZ,IAYHa,kBARwB,CAACE,EAAY,CAACtB,KAC/BJ,EAAYwB,kBAAkB,CACnCC,SAAUC"}