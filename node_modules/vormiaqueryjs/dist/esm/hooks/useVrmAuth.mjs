import { useMutation } from "@tanstack/react-query";
import { getGlobalVormiaClient } from "../client/createVormiaClient.mjs";
const useVrmAuth = (options) => {
  const client = getGlobalVormiaClient();
  const {
    endpoint,
    method = "POST",
    headers = {},
    transform,
    encryptData = false,
    storeToken = true,
    onLoginSuccess,
    onSuccess,
    onError,
    ...mutationOptions
  } = options;
  const mutation = useMutation({
    mutationFn: async (variables) => {
      var _a;
      try {
        const config = {
          method,
          url: endpoint,
          data: variables,
          headers: {
            "Content-Type": "application/json",
            ...headers
          },
          encryptData
        };
        const response = await client.request(config);
        if (storeToken && ((_a = response.data) == null ? void 0 : _a.token)) {
          client.setAuthToken(response.data.token);
        }
        if (transform && typeof transform === "function") {
          return {
            ...response,
            data: transform(response.data)
          };
        }
        return response;
      } catch (error) {
        if (error.status === 401) {
          client.removeAuthToken();
        }
        throw error instanceof Error ? error : new Error("Authentication failed");
      }
    },
    onSuccess: (data, variables, context) => {
      var _a;
      if (onSuccess) {
        onSuccess(data, variables, context);
      }
      if (onLoginSuccess && ((_a = data.data) == null ? void 0 : _a.token)) {
        onLoginSuccess(data);
      }
    },
    onError: (error, variables, context) => {
      if (onError) {
        onError(error, variables, context);
      }
    },
    ...mutationOptions
  });
  const login = async (credentials) => {
    return mutation.mutateAsync(credentials);
  };
  const logout = () => {
    client.removeAuthToken();
  };
  const isAuthenticated = !!client.getAuthToken();
  return {
    ...mutation,
    login,
    logout,
    isAuthenticated
  };
};
export {
  useVrmAuth
};
//# sourceMappingURL=useVrmAuth.mjs.map
