import { useQuery } from "@tanstack/react-query";
import { getGlobalVormiaClient } from "../client/createVormiaClient.mjs";
import { VormiaError } from "../client/utils/VormiaError.mjs";
function useVormiaQuery(options) {
  const client = getGlobalVormiaClient();
  const {
    endpoint,
    method = "GET",
    params,
    data: bodyData,
    headers,
    transform,
    enabled = true,
    ...queryOptions
  } = options;
  const queryKey = [endpoint, method, params, bodyData, headers];
  const queryFn = async () => {
    var _a, _b;
    try {
      const config = {
        method,
        params: method === "GET" ? params : void 0,
        data: method !== "GET" ? bodyData || params : void 0,
        headers
      };
      const response = await client.request({
        url: endpoint,
        ...config
      });
      if (transform) {
        response.data = transform(response.data);
      }
      return response.data;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : "An unknown error occurred";
      const status = (_a = error == null ? void 0 : error.response) == null ? void 0 : _a.status;
      const errorData = (_b = error == null ? void 0 : error.response) == null ? void 0 : _b.data;
      throw new VormiaError(
        errorMessage,
        status,
        errorData
      );
    }
  };
  return useQuery({
    queryKey,
    queryFn,
    enabled,
    ...queryOptions
  });
}
export {
  useVormiaQuery
};
//# sourceMappingURL=react.mjs.map
